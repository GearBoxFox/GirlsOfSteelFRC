// RobotBuilder Version: 3.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import edu.wpi.first.wpilibj2.command.SubsystemBase;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Shooter extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private static final double FEED_SPEED = 0.1;
    private static final double ANGLE_SPEED = 0.5;
    
    private final CANSparkMax m_feederWheel;
    private final CANSparkMax m_shooterWheel;
    private final CANSparkMax m_shooterHood;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     *
     */
    public Shooter() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        m_feederWheel = new CANSparkMax(8, MotorType.kBrushed);
        m_feederWheel.setInverted(false);

        m_shooterWheel = new CANSparkMax(9, MotorType.kBrushed);
        m_shooterWheel.setInverted(false);

        m_shooterHood = new CANSparkMax(10, MotorType.kBrushed);
        m_shooterHood.setInverted(false);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    public void angleUp() {
        m_shooterHood.set(ANGLE_SPEED);
    }

    public void angleDown() {
        m_shooterHood.set(-ANGLE_SPEED);
    }

    public void runShooter(double rpm) {
        // TODO
    }

    public void stopShooter() {
        m_shooterWheel.set(0);
    }

    public void feedIn() {
        m_feederWheel.set(FEED_SPEED);
    }

    public void feedOut() {
        m_feederWheel.set(-FEED_SPEED);
    }

    public boolean isShooterAtSpeed() {
        return false;

        // TODO
    }

}
